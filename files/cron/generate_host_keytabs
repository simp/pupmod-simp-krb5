#!/usr/bin/ruby

# A script to collect all host keytabs into individual files.
# The purpose of this script is to get all host keytabs into a format that can
# be served by Puppet.
#
# This script will fail *silently* if no kadmin.local can be found! This is by
# design since the next phase of keytab distribution should be able to figure
# out if keytabs are available appropriately.
#
# Host keytabs will be placed in the target directory in a subdirectory that
# matches the hostname.
#
# Everything that is in the generated keytabs directory will be *removed* that
# is not a current host with a keytab!
#
require 'optparse'
require 'ostruct'
require 'fileutils'
require 'find'

kadmin_local = '/usr/sbin/kadmin.local'

options = OpenStruct.new
options.target_dir = '/var/kerberos/krb5kdc/cron_generated_keytabs'
options.user = 'root'
options.group = 'root'

opts = OptionParser.new do |_opts|
  _opts.banner = "Usage: #{$0}: [options]"

  _opts.separator("")
  _opts.separator("Specific options:")

  _opts.on('-o','--output_dir [DIRECTORY]', 'The directory to which to output the host files') do |out_dir|
    unless File.directory?(File.dirname(out_dir))
      fail("Could not find target parent directory '#{File.dirname(out_dir)}'")
    end

    options.target_dir = out_dir
  end

  _opts.on('-u','--user [USERNAME]',
    'The user that should own all files',
    '    * Will default to "root" if the user does not exist'
  ) do |user|
    %x(getent passwd #{user} > /dev/null 2>&1)
    if $?.success?
      options.user = user
    end
  end

  _opts.on('-g','--group [GROUPNAME]',
    'The group that should own all files',
    '    * Will default to "root" if the user does not exist'
  ) do |group|
    %x(getent group #{group} > /dev/null 2>&1)
    if $?.success?
      options.group = group
    end
  end
end

begin
  opts.parse!
rescue OptionParser::InvalidOption
  puts opts
  exit 1
end

user = options.user
group = options.group
target_dir = options.target_dir

FileUtils.mkdir_p(target_dir) unless File.directory?(target_dir)
FileUtils.chmod(0750, target_dir)
FileUtils.chown(user, group, target_dir)

if !File.executable?(kadmin_local)
  # Exit without recourse, do not raise an error
  exit 0
end

principal_list = %x(#{kadmin_local} -q 'list_principals').split("\n").map(&:strip)
host_list = principal_list.select{|x| x =~ %r(^host/)}

hosts_to_remove = Dir.glob("#{target_dir}/*")

# Process all of the hosts
host_list.sort.each do |host|
  if host =~ %r(^(.*)/(.*)@(.*))
    host_name = $2

    host_principals = principal_list.select{|x| x =~ %r(^.*/#{host_name})}

    host_dir = File.join(target_dir, host_name)

    host_keytab = File.join(host_dir, 'krb5.keytab')
    host_tmp_keytab = File.join(host_dir, '.krb5.keytab')

    hosts_to_remove.delete(host_dir)

    FileUtils.mkdir_p(host_dir) unless File.directory?(host_dir)
    FileUtils.chmod(0750, host_dir)
    FileUtils.chown(user, group, host_dir)

    host_principals.sort.each do |host_principal|
      %x(#{kadmin_local} -q 'ktadd -k #{host_tmp_keytab} #{host_principal}')
      if $?.success?
        FileUtils.mv(host_tmp_keytab, host_keytab)
      else
        FileUtils.rm_f(host_tmp_keytab)
      end
    end

    if File.exist?(host_keytab)
      FileUtils.chmod(0640, host_keytab)
      FileUtils.chown(user, group, host_keytab)
    end
  end
end

hosts_to_remove.each do |host|
  # Be careful about cleaning up these directories!

  if File.directory?(host) && Dir.glob("#{host}/*").empty?
    FileUtils.rm_rf(host)
    next
  end

  Find.find(host) do |path|
    path.strip!

    next if path == '/'
    next if Dir.glob('/*').include?(path)

    # If we have a keytab, remove us
    if path =~ %r(keytab$)
      FileUtils.rm_rf(host)
      break
    end
  end
end
